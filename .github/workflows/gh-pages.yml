# .github/workflows/gh-pages.yml
# Workflow to build and deploy the application to GitHub Pages

name: Deploy to GitHub Pages

# Trigger deployment only when the "Semantic Release" workflow completes successfully on the main branch
on:
  workflow_run:
    workflows: ["Semantic Release"] # Name of your release workflow
    types:
      - completed
    branches:
      - main

jobs:
  # Build job: Install dependencies, build the application, and upload the artifact
  build:
    name: Build Application
    # Only build if the triggering Semantic Release workflow was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest # Use the latest available Ubuntu runner
    steps:
      - name: Checkout latest main branch code # Description updated for clarity
        uses: actions/checkout@v4
        # REMOVED 'with: ref:' - Defaults to checking out the tip of the default branch ('main')
        # This ensures we get the commit containing the version bump from semantic-release

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # Specify your project's Node.js version
          cache: 'npm' # Enable caching for npm dependencies

      - name: Install Dependencies
        run: npm ci # Use 'ci' for faster, deterministic installs in CI environments

      - name: Build Project
        env:
          NODE_OPTIONS: --no-experimental-fetch --openssl-legacy-provider # Keep if needed
        run: npm run build # Build uses the checked-out code with the updated package.json

      - name: Prepare 404 page for SPA routing
        # Copies index.html to 404.html for GitHub Pages SPA handling
        run: cp dist/index.html dist/404.html

      - name: Setup GitHub Pages
        # Configures GitHub Pages for deployment via Actions
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        # Uploads the built site ('./dist' directory) as a Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist # Specify the directory containing the built site

  # Deploy job: Deploy the uploaded artifact to GitHub Pages
  deploy:
    name: Deploy to Pages
    needs: build # Ensure the build job completes successfully first
    # Only deploy if the build job succeeded
    if: ${{ needs.build.result == 'success' }}
    runs-on: ubuntu-latest
    # Define necessary permissions for the GitHub token used by the deployment action
    permissions:
      contents: read # Read repository content
      pages: write # Write to GitHub Pages
      id-token: write # Required for OIDC token authentication if used by deploy-pages action
    # Specify the deployment environment (enables features like protection rules)
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # Output the deployment URL
    # Define concurrency rules for deployments
    concurrency:
      # Group runs by the commit SHA the triggering release workflow ran on
      group: "pages-${{ github.event.workflow_run.head_sha }}"
      cancel-in-progress: true # Cancel older deploy runs for the same release commit if restarted
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        # Uses the official GitHub action to deploy the artifact to Pages
        uses: actions/deploy-pages@v4